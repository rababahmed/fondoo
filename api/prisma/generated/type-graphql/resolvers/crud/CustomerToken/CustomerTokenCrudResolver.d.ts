import { GraphQLResolveInfo } from "graphql";
import { AggregateCustomerTokenArgs } from "./args/AggregateCustomerTokenArgs";
import { CreateCustomerTokenArgs } from "./args/CreateCustomerTokenArgs";
import { CreateManyCustomerTokenArgs } from "./args/CreateManyCustomerTokenArgs";
import { DeleteCustomerTokenArgs } from "./args/DeleteCustomerTokenArgs";
import { DeleteManyCustomerTokenArgs } from "./args/DeleteManyCustomerTokenArgs";
import { FindFirstCustomerTokenArgs } from "./args/FindFirstCustomerTokenArgs";
import { FindManyCustomerTokenArgs } from "./args/FindManyCustomerTokenArgs";
import { FindUniqueCustomerTokenArgs } from "./args/FindUniqueCustomerTokenArgs";
import { GroupByCustomerTokenArgs } from "./args/GroupByCustomerTokenArgs";
import { UpdateCustomerTokenArgs } from "./args/UpdateCustomerTokenArgs";
import { UpdateManyCustomerTokenArgs } from "./args/UpdateManyCustomerTokenArgs";
import { UpsertCustomerTokenArgs } from "./args/UpsertCustomerTokenArgs";
import { CustomerToken } from "../../../models/CustomerToken";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateCustomerToken } from "../../outputs/AggregateCustomerToken";
import { CustomerTokenGroupBy } from "../../outputs/CustomerTokenGroupBy";
export declare class CustomerTokenCrudResolver {
    findUniqueCustomerToken(ctx: any, info: GraphQLResolveInfo, args: FindUniqueCustomerTokenArgs): Promise<CustomerToken | null>;
    findFirstCustomerToken(ctx: any, info: GraphQLResolveInfo, args: FindFirstCustomerTokenArgs): Promise<CustomerToken | null>;
    findManyCustomerToken(ctx: any, info: GraphQLResolveInfo, args: FindManyCustomerTokenArgs): Promise<CustomerToken[]>;
    createCustomerToken(ctx: any, info: GraphQLResolveInfo, args: CreateCustomerTokenArgs): Promise<CustomerToken>;
    createManyCustomerToken(ctx: any, info: GraphQLResolveInfo, args: CreateManyCustomerTokenArgs): Promise<AffectedRowsOutput>;
    deleteCustomerToken(ctx: any, info: GraphQLResolveInfo, args: DeleteCustomerTokenArgs): Promise<CustomerToken | null>;
    updateCustomerToken(ctx: any, info: GraphQLResolveInfo, args: UpdateCustomerTokenArgs): Promise<CustomerToken | null>;
    deleteManyCustomerToken(ctx: any, info: GraphQLResolveInfo, args: DeleteManyCustomerTokenArgs): Promise<AffectedRowsOutput>;
    updateManyCustomerToken(ctx: any, info: GraphQLResolveInfo, args: UpdateManyCustomerTokenArgs): Promise<AffectedRowsOutput>;
    upsertCustomerToken(ctx: any, info: GraphQLResolveInfo, args: UpsertCustomerTokenArgs): Promise<CustomerToken>;
    aggregateCustomerToken(ctx: any, info: GraphQLResolveInfo, args: AggregateCustomerTokenArgs): Promise<AggregateCustomerToken>;
    groupByCustomerToken(ctx: any, info: GraphQLResolveInfo, args: GroupByCustomerTokenArgs): Promise<CustomerTokenGroupBy[]>;
}
