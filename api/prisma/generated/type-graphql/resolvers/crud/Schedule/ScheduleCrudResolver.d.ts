import { GraphQLResolveInfo } from "graphql";
import { AggregateScheduleArgs } from "./args/AggregateScheduleArgs";
import { CreateManyScheduleArgs } from "./args/CreateManyScheduleArgs";
import { CreateScheduleArgs } from "./args/CreateScheduleArgs";
import { DeleteManyScheduleArgs } from "./args/DeleteManyScheduleArgs";
import { DeleteScheduleArgs } from "./args/DeleteScheduleArgs";
import { FindFirstScheduleArgs } from "./args/FindFirstScheduleArgs";
import { FindManyScheduleArgs } from "./args/FindManyScheduleArgs";
import { FindUniqueScheduleArgs } from "./args/FindUniqueScheduleArgs";
import { GroupByScheduleArgs } from "./args/GroupByScheduleArgs";
import { UpdateManyScheduleArgs } from "./args/UpdateManyScheduleArgs";
import { UpdateScheduleArgs } from "./args/UpdateScheduleArgs";
import { UpsertScheduleArgs } from "./args/UpsertScheduleArgs";
import { Schedule } from "../../../models/Schedule";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateSchedule } from "../../outputs/AggregateSchedule";
import { ScheduleGroupBy } from "../../outputs/ScheduleGroupBy";
export declare class ScheduleCrudResolver {
    schedule(ctx: any, info: GraphQLResolveInfo, args: FindUniqueScheduleArgs): Promise<Schedule | null>;
    findFirstSchedule(ctx: any, info: GraphQLResolveInfo, args: FindFirstScheduleArgs): Promise<Schedule | null>;
    schedules(ctx: any, info: GraphQLResolveInfo, args: FindManyScheduleArgs): Promise<Schedule[]>;
    createSchedule(ctx: any, info: GraphQLResolveInfo, args: CreateScheduleArgs): Promise<Schedule>;
    createManySchedule(ctx: any, info: GraphQLResolveInfo, args: CreateManyScheduleArgs): Promise<AffectedRowsOutput>;
    deleteSchedule(ctx: any, info: GraphQLResolveInfo, args: DeleteScheduleArgs): Promise<Schedule | null>;
    updateSchedule(ctx: any, info: GraphQLResolveInfo, args: UpdateScheduleArgs): Promise<Schedule | null>;
    deleteManySchedule(ctx: any, info: GraphQLResolveInfo, args: DeleteManyScheduleArgs): Promise<AffectedRowsOutput>;
    updateManySchedule(ctx: any, info: GraphQLResolveInfo, args: UpdateManyScheduleArgs): Promise<AffectedRowsOutput>;
    upsertSchedule(ctx: any, info: GraphQLResolveInfo, args: UpsertScheduleArgs): Promise<Schedule>;
    aggregateSchedule(ctx: any, info: GraphQLResolveInfo, args: AggregateScheduleArgs): Promise<AggregateSchedule>;
    groupBySchedule(ctx: any, info: GraphQLResolveInfo, args: GroupByScheduleArgs): Promise<ScheduleGroupBy[]>;
}
