// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Restaurant {
  id                      String             @id @default(uuid())
  name                    String
  email                   String?
  logo                    String?            @db.VarChar(512)
  coverImage              String?            @db.VarChar(512)
  plan                    RestaurantPlan     @relation(fields: [restaurantPlanId], references: [id])
  restaurantPlanId        String
  businessPhone           String?
  reservationPhone        String?
  url                     String?
  cuisine                 String?
  address                 String?            @db.VarChar(512)
  city                    String?
  postCode                String?
  country                 String?
  currency                String?
  priceRange              String?
  diningStyle             String?
  vat                     Float?
  serviceCharge           Float?
  hasParkingFacilities    Boolean?
  hasPartyFacilities      Boolean?
  hasKidsZone             Boolean?
  hasPickup               Boolean?
  hasDelivery             Boolean?
  hasReservation          Boolean?
  isAutoAcceptOrder       Boolean?
  isAutoAcceptReservation Boolean?
  schedules               Schedule[]
  deliveryZones           DeliveryZone[]
  customers               Customer[]
  orders                  Order[]
  orderItems              OrderItem[]
  productCategory         ProductCategory[]
  products                Product[]
  users                   User[]
  coupons                 Coupon[]
  reviews                 RestaurantReview[]
  socials                 RestaurantSocial[]
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  config                  RestaurantConfig?
  domains                 Domain[]
  offers                  Offer[]
  CMSHome                 CMSHome?
  CMSAbout                CMSAbout?
  CMSReview               CMSReview?
  CMSReservation          CMSReservation?
  CMSContact              CMSContact?
  subscription            Subscription?
}

model RestaurantPlan {
  id            String         @id @default(cuid())
  name          String
  price         Float
  isActive      Boolean?
  paddleId      String?
  subscriptions Subscription[]
  restaurants   Restaurant[]
}

model Subscription {
  id                   String         @id @default(cuid())
  paddleSubscriptionId String?
  paddleCancelUrl      String?
  paddleUpdateUrl      String?
  restaurant           Restaurant     @relation(fields: [restaurantId], references: [id])
  restaurantId         String         @unique
  restaurantPlan       RestaurantPlan @relation(fields: [restaurantPlanId], references: [id])
  restaurantPlanId     String
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
}

model RestaurantConfig {
  id               String     @id @default(cuid())
  domains          Domain[]
  customHeaderTags String?    @db.Text
  customFooterTags String?    @db.Text
  primaryColor     String
  secondaryColor   String
  isActive         Boolean?
  hasDarkNavBg     Boolean?
  restaurant       Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId     String     @unique
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Domain {
  id                 String            @id @default(cuid())
  domain             String            @unique
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  restaurantConfig   RestaurantConfig? @relation(fields: [restaurantConfigId], references: [id])
  restaurantConfigId String?
  restaurant         Restaurant?       @relation(fields: [restaurantId], references: [id])
  restaurantId       String?
}

model RestaurantSocial {
  id           String     @id @default(cuid())
  network      String?
  url          String?
  isActive     Boolean?
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String     @unique
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model RestaurantReview {
  id           String     @id @default(cuid())
  title        String
  description  String     @db.VarChar(512)
  rating       Int
  isActive     Boolean
  customer     Customer   @relation(fields: [customerId], references: [id])
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  customerId   String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurantId String
}

model CMSHome {
  id                       String     @id @default(cuid())
  heroHeading              String?
  heroDescription          String?
  heroImage                String?    @db.VarChar(512)
  aboutHeading             String?
  aboutDescription         String?
  aboutImage               String?    @db.VarChar(512)
  dealsHeading             String?
  dealsDescription         String?
  dealsImage               String?    @db.VarChar(512)
  reservationHeading       String?
  reservationDescription   String?
  reservationImage         String?    @db.VarChar(512)
  popularDishesHeading     String?
  popularDishesDescription String?
  popularDishesImage       String?    @db.VarChar(512)
  isActive                 Boolean?
  restaurant               Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId             String     @unique
}

model CMSAbout {
  id                String   @id @default(cuid())
  headerHeading     String?
  headerDescription String?
  headerImage       String?  @db.VarChar(512)
  storyHeading      String?
  storyDescription  String?  @db.VarChar(5120)
  storyImage        String?  @db.VarChar(512)
  isActive          Boolean?

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String     @unique
}

model CMSReview {
  id                String   @id @default(cuid())
  headerHeading     String?
  headerDescription String?
  headerImage       String?
  isActive          Boolean?

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String     @unique
}

model CMSReservation {
  id                String   @id @default(cuid())
  headerHeading     String?
  headerDescription String?
  headerImage       String?
  isActive          Boolean?

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String     @unique
}

model CMSContact {
  id                String   @id @default(cuid())
  headerHeading     String?
  headerDescription String?
  headerImage       String?
  isActive          Boolean?

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String     @unique
}

model ProductCategory {
  id           String     @id @default(cuid())
  name         String
  description  String?    @db.VarChar(1024)
  image        String?    @db.VarChar(512)
  isActive     Boolean?
  isFeatured   Boolean?
  restaurants  Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  Product      Product[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Product {
  id                String           @id @default(cuid())
  name              String
  description       String?          @db.VarChar(2048)
  image             String?          @db.VarChar(512)
  price             Float?
  spiceLevel        SpiceLevel?      @default(None)
  isFeatured        Boolean?
  isActive          Boolean?
  productCategory   ProductCategory? @relation(fields: [productCategoryId], references: [id])
  productCategoryId String?
  restaurant        Restaurant?      @relation(fields: [restaurantId], references: [id])
  restaurantId      String?
  orderItems        OrderItem[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

enum SpiceLevel {
  None
  Mild
  Medium
  Hot
  ExtraHot
}

model Schedule {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  day          String?
  openingTime  String?
  closingTime  String?
  pickupTime   Int?
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
}

model DeliveryZone {
  id                   String      @id @default(cuid())
  createdAt            DateTime    @default(now())
  name                 String
  deliveryTime         Int?
  isPreOrder           Boolean?
  preOrderInstructions String?
  postCode             String?
  deliveryFeeType      DeliveryFee @default(Fixed)
  deliveryCharge       Float       @default(0)
  minDeliveryAmount    Float?
  minDeliveryRadius    Float?
  maxDeliveryRadius    Float?
  restaurant           Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId         String
  orders               Order[]
}

enum DeliveryFee {
  Fixed
  Percent
}

model Customer {
  id          String             @id @default(cuid())
  firstName   String
  lastName    String
  email       String             @unique
  password    String
  phone       String             @unique
  addresses   CustomerAddress[]
  orders      Order[]
  restaurants Restaurant[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  reviews     RestaurantReview[]
}

model CustomerAddress {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  streetAddress String    @db.VarChar(512)
  city          String
  postCode      String
  country       String
  customer      Customer? @relation(fields: [customerId], references: [id])
  customerId    String?
  orders        Order[]
}

model User {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  firstName   String
  lastName    String
  email       String       @unique
  password    String
  phone       String
  restaurants Restaurant[]
  role        Role         @default(Manager)
}

enum Role {
  Manager
  Owner
  Admin
  SuperAdmin
}

model Offer {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  name         String?
  description  String?    @db.VarChar(1024)
  image        String?    @db.VarChar(512)
  startDate    String?
  endDate      String?
  isActive     Boolean?
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  orders       Order[]
  restaurantId String
}

model Coupon {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  code         String
  discount     Discount
  value        Float
  image        String?    @db.VarChar(512)
  startDate    String?
  endDate      String?
  description  String?    @db.VarChar(1024)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  orders       Order[]
  restaurantId String
}

enum Discount {
  Fixed
  Percent
}

model OrderItem {
  id           String      @id @default(cuid())
  product      Product     @relation(fields: [productId], references: [id])
  quantity     Int         @default(1)
  total        Float
  spiceLevel   SpiceLevel  @default(None)
  productId    String
  order        Order       @relation(fields: [orderId], references: [id])
  orderId      String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?
}

enum FulfilmentType {
  Delivery
  Pickup
}

enum Status {
  Pending
  Confirmed
  Cancelled
  Completed
}

model Order {
  id                String           @id @default(cuid())
  items             OrderItem[]
  fulfilmentType    FulfilmentType?
  deliveryZone      DeliveryZone?    @relation(fields: [deliveryZoneId], references: [id])
  address           CustomerAddress? @relation(fields: [customerAddressId], references: [id])
  discount          Float?
  deliveryCharge    Float?
  vat               Float?
  serviceCharge     Float?
  total             Float?
  isViewed          Boolean?
  isPreOrder        Boolean?
  status            Status?          @default(Pending)
  coupon            Coupon?          @relation(fields: [couponId], references: [id])
  couponId          String?
  offer             Offer?           @relation(fields: [offerId], references: [id])
  offerId           String?
  restaurant        Restaurant       @relation(fields: [restaurantId], references: [id])
  restaurantId      String
  customer          Customer?        @relation(fields: [customerId], references: [id])
  customerId        String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  deliveryZoneId    String?
  customerAddressId String?
}
