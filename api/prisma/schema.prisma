// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Restaurant {
  id                      String            @id @default(uuid())
  name                    String
  email                   String
  plan                    RestaurantPlan?   @relation(fields: [restaurantPlanId], references: [id])
  restaurantPlanId        String?
  businessPhone           String?
  reservationPhone        String?
  url                     String?
  cuisine                 String?
  address                 String?
  city                    String?
  postCode                String?
  country                 String?
  currency                String?
  priceRange              String?
  diningStyle             String?
  vat                     String?
  serviceCharge           String?
  hasParkingFacilities    Boolean?
  hasPartyFacilities      Boolean?
  hasKidsZone             Boolean?
  isTakeaway              Boolean?
  isDelivery              Boolean?
  isReservation           Boolean?
  isAutoAcceptOrder       Boolean?
  isAutoAcceptReservation Boolean?
  schedules               Schedule[]
  deliveryZones           DeliveryZone[]
  customers               Customer[]
  orders                  Order[]
  orderItems              OrderItem[]
  productCategory         ProductCategory[]
  products                Product[]
  users                   User[]
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
}

model RestaurantPlan {
  id          String       @id @default(cuid())
  name        String
  price       Float
  isActive    Boolean
  restaurants Restaurant[]
}

model ProductCategory {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  name         String
  description  String?
  image        String?
  isActive     Boolean?
  isFeatured   Boolean?
  restaurants  Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  Product      Product[]
}

model Product {
  id                String           @id @default(cuid())
  createdAt         DateTime         @default(now())
  name              String
  description       String?
  image             String?
  price             Int?
  spiceLevel        SpiceLevel       @default(None)
  isPopular         Boolean?
  isActive          Boolean?
  ProductCategory   ProductCategory? @relation(fields: [productCategoryId], references: [id])
  productCategoryId String?
  Restaurant        Restaurant?      @relation(fields: [restaurantId], references: [id])
  restaurantId      String?
  OrderItem         OrderItem[]
}

enum SpiceLevel {
  None
  Mild
  Medium
  Hot
  ExtraHot
}

model Schedule {
  id                String      @id @default(cuid())
  createdAt         DateTime    @default(now())
  day               String?
  openingTime       String?
  closingTime       String?
  minDeliveryAmount Int?
  deliveryTime      String?
  takeawayTime      String?
  Restaurant        Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId      String?
}

model DeliveryZone {
  id                String      @id @default(cuid())
  createdAt         DateTime    @default(now())
  zoneTitle         String
  zonePostCode      String?
  deliveryFeeType   DeliveryFee @default(Fixed)
  deliveryCharge    Int         @default(0)
  minDeliveryAmount Int?
  minDeliveryRadius Int?
  maxDeliveryRadius Int?
  Restaurant        Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId      String?
}

enum DeliveryFee {
  Fixed
  Percent
}

model Customer {
  id          String            @id @default(cuid())
  createdAt   DateTime          @default(now())
  firstName   String
  lastName    String
  email       String            @unique
  password    String
  phone       String
  token       CustomerToken[]
  addresses   CustomerAddress[]
  orders      Order[]
  restaurants Restaurant[]
  updatedAt   DateTime          @updatedAt
}

model CustomerAddress {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  streetAddress String
  city          String
  postCode      String
  country       String
  Customer      Customer? @relation(fields: [customerId], references: [id])
  customerId    String?
}

model CustomerToken {
  id         String    @id @default(cuid())
  token      String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
}

model User {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  firstName   String
  lastName    String
  email       String       @unique
  password    String
  phone       String?
  token       UserToken[]
  restaurants Restaurant[]
  role        Role         @default(Manager)
}

enum Role {
  Manager
  Owner
  Admin
  SuperAdmin
}

model UserToken {
  id        String   @id @default(cuid())
  token     String
  provider  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Coupon {
  id          String   @id @default(cuid())
  code        String
  discount    Discount
  value       Float
  description String?
  orders      Order[]
}

enum Discount {
  Fixed
  Percent
}

model OrderItem {
  id           String      @id @default(cuid())
  product      Product     @relation(fields: [productId], references: [id])
  quantity     Int         @default(1)
  total        Int
  spiceLevel   SpiceLevel  @default(None)
  productId    String
  Order        Order?      @relation(fields: [orderId], references: [id])
  orderId      Int?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?
}

model Order {
  id              Int         @id @default(autoincrement())
  items           OrderItem[]
  address         String?
  discount        Float
  deliveryCharges Float
  vat             Float
  serviceCharge   Float
  total           Float
  isAccepted      Boolean
  Coupon          Coupon?     @relation(fields: [couponId], references: [id])
  couponId        String?
  restaurant      Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId    String
  Customer        Customer?   @relation(fields: [customerId], references: [id])
  customerId      String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}
