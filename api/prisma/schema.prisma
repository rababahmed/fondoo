// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider                 = "typegraphql-prisma"
  output                   = "../prisma/generated/type-graphql"
  emitTranspiledCode       = true
  useUncheckedScalarInputs = true
  useOriginalMapping       = true
}

model Restaurant {
  id                      String            @id @default(uuid())
  createdAt               DateTime          @default(now())
  name                    String
  email                   String
  businessPhone           String?
  reservationPhone        String?
  url                     String?
  address                 String?
  city                    String?
  postCode                String?
  country                 String?
  currency                String?
  priceRange              String?
  diningStyle             String?
  vat                     String?
  serviceCharge           String?
  hasParking              Boolean?
  hasPartyFacilities      Boolean?
  hasKidsZone             Boolean?
  isTakeaway              Boolean?
  isDelivery              Boolean?
  isReservation           Boolean?
  isOrdering              Boolean?
  isAutoAcceptOrder       Boolean?
  isAutoAcceptReservation Boolean?
  schedule                Schedule[]
  deliveryZones           DeliveryZone[]
  customers               Customer[]
  orders                  Order[]
  productCategory         ProductCategory[]
  products                Product[]
  updatedAt               DateTime          @updatedAt
  users                   User[]
}

model ProductCategory {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  name         String
  description  String?
  image        String?
  isActive     Boolean?
  isFeatured   Boolean?
  restaurants  Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  Product      Product[]
}

model Product {
  id                String           @id @default(cuid())
  createdAt         DateTime         @default(now())
  name              String
  description       String?
  image             String?
  price             Int?
  spiceLevel        SpiceLevel       @default(None)
  isPopular         Boolean?
  isActive          Boolean?
  ProductCategory   ProductCategory? @relation(fields: [productCategoryId], references: [id])
  productCategoryId String?
  Restaurant        Restaurant?      @relation(fields: [restaurantId], references: [id])
  restaurantId      String?
}

enum SpiceLevel {
  None
  Mild
  Medium
  Hot
  ExtraHot
}

model Schedule {
  id                Int         @id @default(autoincrement())
  createdAt         DateTime    @default(now())
  openingTime       String?
  closingTime       String?
  minDeliveryAmount Int?
  deliveryTime      String?
  takeawayTime      String?
  Restaurant        Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId      String?
}

model DeliveryZone {
  id                Int         @id @default(autoincrement())
  createdAt         DateTime    @default(now())
  zoneTitle         String
  zonePostCode      String?
  deliveryFeeType   DeliveryFee @default(Fixed)
  deliveryCharge    Int         @default(0)
  minDeliveryAmount Int?
  minDeliveryRadius Int?
  maxDeliveryRadius Int?
  Restaurant        Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId      String?
}

enum DeliveryFee {
  Fixed
  Percent
}

model Customer {
  id           Int               @id @default(autoincrement())
  createdAt    DateTime          @default(now())
  firstName    String
  lastName     String
  email        String            @unique
  password     String
  phone        String
  token        CustomerToken[]
  address      CustomerAddress[]
  orders       Order[]
  Restaurant   Restaurant?       @relation(fields: [restaurantId], references: [id])
  restaurantId String?
  updatedAt    DateTime          @updatedAt
}

model CustomerAddress {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  streetAddress String
  city          String
  postCode      String
  country       String
  Customer      Customer? @relation(fields: [customerId], references: [id])
  customerId    Int?
  Order         Order[]
}

model CustomerToken {
  id         Int       @id @default(autoincrement())
  token      String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId Int?
}

model User {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  firstName    String
  lastName     String
  email        String      @unique
  password     String
  phone        String?
  token        UserToken[]
  role         Role        @default(Manager)
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?
  orders       Order[]
}

enum Role {
  Manager
  Owner
  Admin
  SuperAdmin
}

model UserToken {
  id        Int      @id @default(autoincrement())
  token     String
  provider  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model Order {
  id                Int              @id @default(autoincrement())
  items             Json
  coupon            String?
  deliveryCharges   Float
  vat               Float
  serviceCharge     Float
  total             Float
  isAccepted        Boolean
  user              User             @relation(fields: [userId], references: [id])
  restaurant        Restaurant       @relation(fields: [restaurantId], references: [id])
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  userId            Int
  restaurantId      String
  Customer          Customer?        @relation(fields: [customerId], references: [id])
  customerId        Int?
  CustomerAddress   CustomerAddress? @relation(fields: [customerAddressId], references: [id])
  customerAddressId Int?
}
