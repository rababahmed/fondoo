// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Restaurant {
  id                      String             @id @default(uuid())
  name                    String
  email                   String?
  logo                    String?
  coverImage              String?
  plan                    RestaurantPlan     @relation(fields: [restaurantPlanId], references: [id])
  restaurantPlanId        String
  businessPhone           String?
  reservationPhone        String?
  url                     String?
  cuisine                 String?
  address                 String?
  city                    String?
  postCode                String?
  country                 String?
  currency                String?
  priceRange              String?
  diningStyle             String?
  vat                     String?
  serviceCharge           String?
  hasParkingFacilities    Boolean?
  hasPartyFacilities      Boolean?
  hasKidsZone             Boolean?
  isTakeaway              Boolean?
  isDelivery              Boolean?
  isReservation           Boolean?
  isAutoAcceptOrder       Boolean?
  isAutoAcceptReservation Boolean?
  schedules               Schedule[]
  deliveryZones           DeliveryZone[]
  customers               Customer[]
  orders                  Order[]
  orderItems              OrderItem[]
  productCategory         ProductCategory[]
  products                Product[]
  users                   User[]
  coupons                 Coupon[]
  reviews                 RestaurantReview[]
  socials                 RestaurantSocial?
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  config                  RestaurantConfig?
  offers                  Offer[]
  restaurantSocialId      String?
  CMSHome                 CMSHome?
  CMSAbout                CMSAbout?
  CMSReview               CMSReview?
  CMSReservation          CMSReservation?
  CMSContact              CMSContact?
}

model RestaurantPlan {
  id          String       @id @default(cuid())
  name        String
  price       Float
  isActive    Boolean
  restaurants Restaurant[]
}

model RestaurantConfig {
  id                   String     @id @default(cuid())
  domain               String     @unique
  primaryColor         String
  secondaryColor       String
  isActive             Boolean
  topRibbonBgColor     String?
  topRibbonAccentColor String?
  navBarBgColor        String?
  navBarAccentColor    String?
  heroAccentColor      String?
  restaurant           Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId         String
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
}

model RestaurantSocial {
  id           String     @id @default(cuid())
  facebook     String?
  instagram    String?
  pinterest    String?
  isActive     Boolean?
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model RestaurantReview {
  id           String     @id @default(cuid())
  title        String
  description  String
  rating       String
  isActive     Boolean
  customer     Customer   @relation(fields: [customerId], references: [id])
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  customerId   String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurantId String
}

model CMSHome {
  id                       String   @id @default(cuid())
  heroHeading              String?
  heroDescription          String?
  heroImage                String?
  aboutHeading             String?
  aboutDescription         String?
  aboutImage               String?
  dealsHeading             String?
  dealsDescription         String?
  dealsImage               String?
  reservationHeading       String?
  reservationDescription   String?
  reservationImage         String?
  popularDishesHeading     String?
  popularDishesDescription String?
  popularDishesImage       String?
  isActive                 Boolean?

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
}

model CMSAbout {
  id                String   @id @default(cuid())
  headerHeading     String?
  headerDescription String?
  headerImage       String?
  storyHeading      String?
  storyDescription  String?
  storyImage        String?
  isActive          Boolean?

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
}

model CMSReview {
  id                String   @id @default(cuid())
  headerHeading     String?
  headerDescription String?
  headerImage       String?
  isActive          Boolean?

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
}

model CMSReservation {
  id                String   @id @default(cuid())
  headerHeading     String?
  headerDescription String?
  headerImage       String?
  isActive          Boolean?

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
}

model CMSContact {
  id                String   @id @default(cuid())
  headerHeading     String?
  headerDescription String?
  headerImage       String?
  isActive          Boolean?

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
}

model ProductCategory {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  name         String
  description  String?
  image        String?
  isActive     Boolean?
  isFeatured   Boolean?
  restaurants  Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  Product      Product[]
}

model Product {
  id                String           @id @default(cuid())
  createdAt         DateTime         @default(now())
  name              String
  description       String?
  image             String?
  price             Int?
  spiceLevel        SpiceLevel       @default(None)
  isPopular         Boolean?
  isActive          Boolean?
  productCategory   ProductCategory? @relation(fields: [productCategoryId], references: [id])
  productCategoryId String?
  restaurant        Restaurant?      @relation(fields: [restaurantId], references: [id])
  restaurantId      String?
  orderItems        OrderItem[]
}

enum SpiceLevel {
  None
  Mild
  Medium
  Hot
  ExtraHot
}

model Schedule {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  day          String?
  openingTime  String?
  closingTime  String?
  deliveryTime Int?
  takeawayTime Int?
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
}

model DeliveryZone {
  id                String      @id @default(cuid())
  createdAt         DateTime    @default(now())
  name              String
  postCode          String?
  deliveryFeeType   DeliveryFee @default(Fixed)
  deliveryCharge    Int         @default(0)
  minDeliveryAmount Int?
  minDeliveryRadius Int?
  maxDeliveryRadius Int?
  restaurant        Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId      String
}

enum DeliveryFee {
  Fixed
  Percent
}

model Customer {
  id          String             @id @default(cuid())
  createdAt   DateTime           @default(now())
  firstName   String
  lastName    String
  email       String             @unique
  password    String
  phone       String             @unique
  addresses   CustomerAddress[]
  orders      Order[]
  restaurants Restaurant[]
  updatedAt   DateTime           @updatedAt
  reviews     RestaurantReview[]
}

model CustomerAddress {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  streetAddress String
  city          String
  postCode      String
  country       String
  customer      Customer? @relation(fields: [customerId], references: [id])
  customerId    String?
  orders        Order[]
}

model User {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  firstName   String
  lastName    String
  email       String       @unique
  password    String
  phone       String
  restaurants Restaurant[]
  role        Role         @default(Manager)
}

enum Role {
  Manager
  Owner
  Admin
  SuperAdmin
}

model Offer {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  name         String
  description  String?
  isActive     Boolean
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  orders       Order[]
  restaurantId String
}

model Coupon {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  code         String
  discount     Discount
  value        Float
  description  String?
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  orders       Order[]
  restaurantId String
}

enum Discount {
  Fixed
  Percent
}

model OrderItem {
  id           String      @id @default(cuid())
  product      Product     @relation(fields: [productId], references: [id])
  quantity     Int         @default(1)
  total        Int
  spiceLevel   SpiceLevel  @default(None)
  productId    String
  order        Order       @relation(fields: [orderId], references: [id])
  orderId      Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?
}

model Order {
  id                Int              @id @default(autoincrement())
  items             OrderItem[]
  address           CustomerAddress? @relation(fields: [customerAddressId], references: [id])
  discount          Float
  deliveryCharge    Float
  vat               Float
  serviceCharge     Float
  total             Float
  isAccepted        Boolean
  Coupon            Coupon?          @relation(fields: [couponId], references: [id])
  couponId          String?
  offer             Offer?           @relation(fields: [offerId], references: [id])
  offerId           String?
  restaurant        Restaurant       @relation(fields: [restaurantId], references: [id])
  restaurantId      String
  Customer          Customer?        @relation(fields: [customerId], references: [id])
  customerId        String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  customerAddressId String?
}
